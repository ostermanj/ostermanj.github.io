window.__sveltekit_data = (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C){return {type:p,nodes:[q,q,{type:p,data:{page:"homepage",fields:{overview:"Web development and data visualization for mission-driven orgs. HTML, CSS, JavaScript; Svelte, Vue.js; D3.js, Mapbox; NodeJS, AWS, Azure, Google.",body:"\u003Cp\u003Eüëãüèª Hello. I am a web developer specializing in performance, accessibility, and data visualization. I work full-time for the \u003Ca href=\"https:\u002F\u002Fwww.ushmm.org\"\u003EUS Holocaust Memorial Museum\u003C\u002Fa\u003E but am occasionally available for side projects.\u003C\u002Fp\u003E\n",featuredBlogPosts:[{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:c,id:d}},id:"27n0QDqqMFwDxstDwS8qJx",type:b,createdAt:"2023-01-13T01:49:32.802Z",updatedAt:"2023-02-22T21:22:31.999Z",environment:{sys:{id:e,type:a,linkType:f}},revision:13,contentType:{sys:{type:a,linkType:h,id:r}},locale:g},fields:{authors:[{sys:{type:a,linkType:b,id:s}}],title:"CSS container queries are here!",datePublished:"2023-01-12",dateUpdated:"2023-02-16",body:"\u003Caside class=\"update\"\u003E\n  Support for container queries landed in Firefox on February 13, 2023.\n\u003C\u002Faside\u003E\n\nIt's a good time to be a web developer. The excesses of client-side mania (mea culpa) are giving way to a rediscovery of server-side rendering (which of course never went anywhere). Build-and-deploy services like Vercel, Amplify, Azure Static Web Apps, and a host of others make it easy for small teams or one lone freelancer to set up fully featured websites with edge functions, caching, APIs, and smart image delivery. And with recent advances, especially in CSS, working on the [front of the front end](https:\u002F\u002Fbradfrost.com\u002Fblog\u002Fpost\u002Ffront-of-the-front-end-and-back-of-the-front-end-web-development\u002F) is full of new possibilities and productivity gains.\n\nCSS, it turns out, [really is awesome](https:\u002F\u002Fduckduckgo.com\u002F?t=ffab&q=css+is+awesome&iax=images&ia=images).\n\n## Container queries, finally!\n\nOne of the features I and others have been most eagerly awaiting is container queries. They will make reusing responsive components in different contexts much easier. Grid and flexbox layouts have already lessened the need to use media queries to make layouts responsive to screen size. They are [*intrinsically* responsive](https:\u002F\u002Ftalks.jensimmons.com\u002F15TjNW), wrapping rows and columns based on container size without the need to instruct browsers at exactly what screen width to make the change.\n\nThat's great, but they haven't entirely eliminated my use of media queries. There is still a need to employ them to, for instance, hide an element within a grid at certain screen sizes. Here's a recent example from my work rebuilding the timeline-of-events pages for the [Holocaust Encyclopedia](https:\u002F\u002Fencyclopedia.ushmm.org\u002Fcontent\u002Fen\u002Ftimeline\u002Fholocaust).\n\n\u003Cdiv class=\"fx fx-wrap ai-e\"\u003E\n\u003Cfigure class=\"half\"\u003E\n\n![Timeline events without description shown](\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F5c3gZQDg7YwjqWwPNRZybi\u002F34d67b517736ba14d35a77aa1e242f43\u002FScreenshot_2023-01-11_at_8.56.40_AM.png)\n\n \u003Cfigcaption\u003EOn small screens less than 500px wide, no description is shown.\u003C\u002Ffigcaption\u003E\n    \u003C\u002Ffigure\u003E\n\n\u003Cfigure class=\"half\"\u003E\n\n![Timeline event with description shown](\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F2zrWLBAT2ahMA0tLtIXEsu\u002F17eab9d573cec6fb7b263f5b092dab57\u002FScreenshot_2023-01-11_at_8.55.12_AM.png)\n\n\u003Cfigcaption\u003EOn screens at least 500px wide, a media query ensures that the description is shown.\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\u003C\u002Fdiv\u003E\n\nThis is the HTML for one of the content cards, each marked up as an `\u003Carticle\u003E`:\n\n\u003Ca href=\"https:\u002F\u002Fgist.github.com\u002Fostermanj\u002Fb7b7b55bfb8483e4599dbf82f8690632\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\"\u003EEmbedded content: https:\u002F\u002Fgist.github.com\u002Fostermanj\u002Fb7b7b55bfb8483e4599dbf82f8690632\u003C\u002Fa\u003E\n\nThe CSS makes each event a flexbox with two flex-item children: the container for the image and the container for the text. The relative size of the two children is handled intrinsically using the `flex-grow` css property‚Äîno need for media queries there.\tBut we wanted to show the description of the event only on screens larger than 500px wide, and that required a media query:\n\n\u003Ca href=\"https:\u002F\u002Fgist.github.com\u002Fostermanj\u002F48a62a2cceebab82992e8fb8ce5b3703\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\"\u003EEmbedded content: https:\u002F\u002Fgist.github.com\u002Fostermanj\u002F48a62a2cceebab82992e8fb8ce5b3703\u003C\u002Fa\u003E\n\nWhat that means, though, is that the list of events isn't 100% reusable in other contexts. Say I needed to put the list of events in a sidebar that was 320px wide? If the viewport were at least 500px wide, the event description would show even though the component would be much narrower than the threshold. The logic should be based on the size of the component, not the size of the screen. That's what container queries make possible.\n\n## Simple syntax\n\nThe syntax is pretty simple and builds what we already know from media queries. See the [MDN article](https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FCSS\u002FCSS_Container_Queries) for a full description. \n\nChanging my example to use container queries would only require changing to CSS to declare a containment context on the `article` element, giving it a `container-type` and `container-name` using the `container` shorthand syntax:\n\n\u003Ca href=\"https:\u002F\u002Fgist.github.com\u002Fostermanj\u002Fd948427303b301a896bf153b30c934f5\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\"\u003EEmbedded content: https:\u002F\u002Fgist.github.com\u002Fostermanj\u002Fd948427303b301a896bf153b30c934f5\u003C\u002Fa\u003E\n\nAnd then modify the media query from above to be a container query instead:\n\n\u003Ca href=\"https:\u002F\u002Fgist.github.com\u002Fostermanj\u002F1fca89adfbd045bb9a9e948b3b157293\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\"\u003EEmbedded content: https:\u002F\u002Fgist.github.com\u002Fostermanj\u002F1fca89adfbd045bb9a9e948b3b157293\u003C\u002Fa\u003E\n\nPretty great! Now displaying or hiding the description depends on the size of the container rather than the viewport. That means the component can be used elsewhere without having to redefine at what screen sizes the description should appear. Code it once and use it everywhere.\n\n## Use them now?\n\nI'll be using container queries from here on out in personal projects soon, I hope, in work projects for production.\n\nContainer queries are landing in browsers and, at the time I'm writing this, have about 75% browser support globally. Firefox, notably, does not yet support them in the stable release but does in the nightly release. Coverage should be good enough now or very soon to use them in a progressive-enhancement sort of way, when you can accept that some browsers won't abide.\n\nThere is a [JavaScript polyfill](https:\u002F\u002Fgithub.com\u002FGoogleChromeLabs\u002Fcontainer-query-polyfill) available that simply works. Please read its docs before using.\n",snippet:"Container queries are coming, and they will make reusing responsive components in different contexts much easier.",tags:[{sys:{type:a,linkType:b,id:"cNdrt61TxmpGdCVqJVNYj"}},{sys:{type:a,linkType:b,id:"4THQ9OOeBdfmo5fzHu6mIr"}}],heroImage:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:c,id:d}},id:"fMsWEAYYlWL7oGyXprIjF",type:j,createdAt:t,updatedAt:t,environment:{sys:{id:e,type:a,linkType:f}},revision:i,locale:g},fields:{title:"Containers",description:"A large stack of shipping containers on a ship or at harbor.",file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002FfMsWEAYYlWL7oGyXprIjF\u002Fe98ffee9cd68da2575ca39be60aae7cc\u002F15405674883_2c892ea4e2_b.jpg",details:{size:273916,image:{width:1024,height:682}},fileName:"15405674883_2c892ea4e2_b.jpg",contentType:"image\u002Fjpeg"}}},slug:"css-container-queries-are-here"}},{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:c,id:d}},id:"486Iup6Yrwh24CbZrSONWK",type:b,createdAt:"2023-04-26T18:17:29.728Z",updatedAt:"2023-04-26T19:44:45.939Z",environment:{sys:{id:e,type:a,linkType:f}},revision:7,contentType:{sys:{type:a,linkType:h,id:u}},locale:g},fields:{title:"Interactive dashboard of Philadelphia‚Äôs post-COVID economy",workplace:{sys:{type:a,linkType:b,id:m}},link:"https:\u002F\u002Fwww.pewtrusts.org\u002Fen\u002Fresearch-and-analysis\u002Fdata-visualizations\u002F2021\u002Fpew-dashboard-tracks-philadelphias-economic-recovery-and-growth-in-the-age-of-covid",datePublished:"2022-05-03",body:"This was one of my last projects while at Pew and one of the hardest. While most of my projects were purely front-end pursuits with static data, this dashboard required a back-end database, serverless functions, and some data preprocessing in Node.\n\n![Philly dashboard](\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F17tItciHDEUKPnbdjjppF5\u002Ff4a3753ac81af209d954f5bd56f1ebd5\u002Fphilly-dashboard.png)\n\nThe goal was to chart Philadelphia's economic recovery coming out of the Covid pandemic. My colleagues on the research side secured a large handful of data sources, some public and some proprietary, to make it possible. They handed off to me mostly clean datasets for each indicator:\n\n* delinquency on bills\n* financial stability\n* balance on credit accounts\n* work locations\n* sales by sector\n* bankruptcy filings\n* jobs by sector\n* jobs by establishment size\n* hourly wages by sector\n\n## The back end and preprocessing\nI needed a database to store this data in. The datasets were too big to wrangle on the client side, and I had to keep potentially identifiable individual data points from being exposed to the front end. (For the same reason, the display of some data is redacted if the number of businesses making up the average falls below a threshold because of the filters applied.) The database could have been anything; I ended up using MS Azure Cosmos DB.\n\nAll the datasets are put into the dataset (created or updated) by API using some NodeJS scripts. The first three datasets, proprietary data from Experian, are sent to the database basically as-is with the addition of precalculated aggregates. When filters are applied, a serverless function queries the database for matching entries and recalculates the result on the fly. Other datasets have far fewer filters available; each filter option is precalculated before being added to the database.\n## The front end\nI built the front end with Svelte wrapped up by Webpack. There's some D3 in there. The build step prerenders the page so that the static dashboard appears immediately on page load. JavaScript then rehydrates the app and provides the interactivity‚Äîgood for core web vitals and SEO.\n",snippet:"This project to chart Philadelphia's economic recovery was one of my last while at Pew, and one of the hardest.",tags:[{sys:{type:a,linkType:b,id:"3h8rU5x8HRGc67rBgE4jjm"}},{sys:{type:a,linkType:b,id:n}}],heroImage:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:c,id:d}},id:"17tItciHDEUKPnbdjjppF5",type:j,createdAt:v,updatedAt:v,environment:{sys:{id:e,type:a,linkType:f}},revision:i,locale:g},fields:{title:"Philly dashboard",description:"Data dashboard showing zip-code map and line graphs for three economic indicators: delinquency on bills, financial stability, and balance on credit accounts.",file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F17tItciHDEUKPnbdjjppF5\u002Ff4a3753ac81af209d954f5bd56f1ebd5\u002Fphilly-dashboard.png",details:{size:353232,image:{width:1500,height:1065}},fileName:"philly-dashboard.png",contentType:o}}}}},{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:c,id:d}},id:"5nT7UZh2gDjGmdQ8D9Pa7K",type:b,createdAt:w,updatedAt:w,environment:{sys:{id:e,type:a,linkType:f}},revision:i,contentType:{sys:{type:a,linkType:h,id:u}},locale:g},fields:{title:"Chart building web app",workplace:{sys:{type:a,linkType:b,id:m}},datePublished:"2021-03-07",body:"\nThis is a web app for people with no coding experience to build interactive charts for the web. The charts are built with Highcharts; the graphical user interface transforms settings into the JSON configuration Highcharts needs to render them on the web.\n\nBut there's more. One persistent challenge in publishing for the web‚Äîa theme central to my work for more than ten years now‚Äîis that orgs are also publishing for print (or at least for PDF). That means that each asset, like a chart, actually needs several: one for print and potentially multiple for the web, for different screen sizes and resolutions. That usually means a lot of time sunk keeping versions in sync with one another.\n\n![user interface of the chart building tool with a menu down the left side and thumbnail images of charts](\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F4MW9BiXIVLUSVHXKDPkaSv\u002Fde592f65984f15cec8d37b5a2372afd8\u002Fchartbuilder.png)\n\nThis tool solves that problem for charts. The charts are digital-first, optimized for all screen sizes by virtue of Highcharts' responsiveness, but they can be exported as SVGs for use in print at whatever size the designers need. The print options are separated from the web version, but they all share the same source. Update one and you update the other. That translates to huge time savings.\n\nThere are off-the-shelf solutions not too different from this but none cross the print-web divide like this.\n\n**What else does it do?**\n\n* Users can log in through Google and save their work. Others can take that work and edit or publish it.\n* Web charts can easily be static images or interactive Highcharts.\n* Branding and other specs are enforced effortlessly.\n* Advanced users can enter custom JSON configurations to extend and override standard settings.\n\nI built this for Pew and we're trying to roll it out. (Changing processes is hard.) Under the hood, though, this tool could be used by anyone by specifying brand colors, fonts, and other specs.",snippet:"There are off-the-shelf charting solutions not too different from this but none cross the print-web divide as well.",tags:[{sys:{type:a,linkType:b,id:n}},{sys:{type:a,linkType:b,id:"5vgnIFPLCNtziUkAvnHwVx"}}],heroImage:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:c,id:d}},id:"4MW9BiXIVLUSVHXKDPkaSv",type:j,createdAt:x,updatedAt:x,environment:{sys:{id:e,type:a,linkType:f}},revision:i,locale:g},fields:{title:"user interface of the chart building tool with a menu down the left side and thumbnail images of charts",description:y,file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F4MW9BiXIVLUSVHXKDPkaSv\u002Fde592f65984f15cec8d37b5a2372afd8\u002Fchartbuilder.png",details:{size:102564,image:{width:1017,height:715}},fileName:"chartbuilder.png",contentType:o}}}}},{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:c,id:d}},id:"6V9Xr8BggyQQpVgahElTkA",type:b,createdAt:"2022-08-14T21:12:52.768Z",updatedAt:"2022-08-16T15:05:33.526Z",environment:{sys:{id:e,type:a,linkType:f}},revision:10,contentType:{sys:{type:a,linkType:h,id:r}},locale:g},fields:{authors:[{sys:{type:a,linkType:b,id:s}}],title:"How I make using Mapbox easier, part one: async adding sources and layers",datePublished:"2020-12-29",body:"\nMapbox (specifically, for me, [Mapbox GL JS][1]) is a great platform for visualizing geographic data. I like that their documentation is thorough (though not always easy to digest). I like that they seem to have invested a lot of effort into making it a useful dataviz tool, in addition to all its other uses: navigation, geocoding, augmented vision. I like that they're headquartered here in DC. And I like that their pricing plans have a meaningful and useful free tier.\n\nAwesome.\n\nOver the three or four years I've been using it, though, I have come up against the same challenges. One is the difficulty of its expressions syntax for data-driven styling or interpolated values, which I have to look up every time. Another is accessing the full data behind map features that may not be fully rendered. Another‚Äîthe topic of this post‚Äîis how to work with the async nature of adding sources and layers to a map.\n\n![a mapbox view of San Diego with red, orange, and purple extruded recangles representing buildings on a dark background][2]\n\nAdding sources and layers to a Mapbox map is pretty straightforward. The source is the data, and the layer is a visualization of the data. You can have multiple layers based on the same data. To [add a source][3], you use the `addSource()` method of the Map instance. It takes an `id` string and a config object as parameters. The underlying data can be geoJSON, or a vector source already uploaded to Mapbox, or others like raster images or video. To [add a layer][4], you use the `addLayer()` method, which takes a config object and, optionally, the name of another layer to insert the new layer before.\n\nThe trouble is your code may quite easily call the `addLayer()` method\nbefore `addSource()` really takes effect. Both methods are quietly asynchronous, handled by Mapbox outside the written sequence of your code. Mapbox could, perhaps should, make those methods explicitly async or, in other words, make them Promises that resolve only after they have taken full effect. In fact, in this [Github issue][5], it looks like that may be in the works.\n\nIn the meantime, it simply takes time for `addSource()` and `addLayer()` to take effect, which means you have to ensure the map layers are ready before you try to do anything with them. My solution has been to wrap the native methods in my own Promises that test whether the layers are rendered before resolving. This way, I can add a source, add some layers, and then chain my next actions via `then()`.\n\nThat solution is available as a small npm package, [mapbox-helper][6]. Give it a try. More info about how it works and how to use it is available there. The short version is this: the native `addSource()` and `addLayer()` methods are combined into one, `addSourceAndLayers()`, in which you specify the source you want to add and one or more layers that are based on it. Internally, adding the layers only occurs after the source is ready. The method returns a Promise to your code that resolves only after all layers have been rendered or, if a layer's visibility property is set to 'none', is ready to be rendered.\n\nFor example:\n\n\u003Ca href=\"https:\u002F\u002Fgist.github.com\u002Fostermanj\u002Fc8302e49e9b83b83a05bd2e964d92fba\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\"\u003EEmbedded content: https:\u002F\u002Fgist.github.com\u002Fostermanj\u002Fc8302e49e9b83b83a05bd2e964d92fba\u003C\u002Fa\u003E\n\nThanks for reading. And, by the way, if you haven't checked out Mapbox's [version 2 release yet][7], you should. It has really great 3D rendering of elevation data and super hi-res satellite imagery, among other performance improvements.\n\n[1]: https:\u002F\u002Fdocs.mapbox.com\u002Fmapbox-gl-js\u002Fapi\u002F\n[2]: \u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F3KfGz5kmTI4dkz0l98oHY3\u002F777fd2648aaab56363a79c818dc3d1c2\u002Fmapbox.png\n[3]: https:\u002F\u002Fdocs.mapbox.com\u002Fmapbox-gl-js\u002Fapi\u002Fsources\u002F\n[4]: https:\u002F\u002Fdocs.mapbox.com\u002Fmapbox-gl-js\u002Fapi\u002Fmap\u002F#map#addlayer\n[5]: https:\u002F\u002Fgithub.com\u002Fmapbox\u002Fmapbox-gl-js\u002Fissues\u002F10192\n[6]: https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fmapbox-helper\n[7]: https:\u002F\u002Fwww.mapbox.com\u002Fblog\u002Fmapbox-gl-js-v2-3d-maps-camera-api-sky-api-launch",snippet:"Use a small npm package to work with the async nature of adding sources and layers to a Mapbox map.",tags:[{sys:{type:a,linkType:b,id:"5tPE4sus2igTIK2zIdqyBz"}},{sys:{type:a,linkType:b,id:n}}],heroImage:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:c,id:d}},id:"3KfGz5kmTI4dkz0l98oHY3",type:j,createdAt:z,updatedAt:z,environment:{sys:{id:e,type:a,linkType:f}},revision:i,locale:g},fields:{title:"mapbox async layers",description:y,file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F3KfGz5kmTI4dkz0l98oHY3\u002F777fd2648aaab56363a79c818dc3d1c2\u002Fmapbox.png",details:{size:774983,image:{width:1014,height:716}},fileName:"mapbox.png",contentType:o}}}}}],featuredWorkExperience:[{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:c,id:d}},id:"i4wC2707crrr3J7VA6sjf",type:b,createdAt:A,updatedAt:A,environment:{sys:{id:e,type:a,linkType:f}},revision:i,contentType:{sys:{type:a,linkType:h,id:k}},locale:g},fields:{title:"Front-End Developer",workPlace:{sys:{type:a,linkType:b,id:"5oOuYjZ2En7UsYZddeN4xq"}},startDate:"2022-05-31",workPlaceName:"US Holocaust Memorial Museum",url:"https:\u002F\u002Fwww.ushmm.org"}},{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:c,id:d}},id:"5ipJqnKVDNDSxKnq3Q2Onc",type:b,createdAt:"2022-08-11T20:25:50.709Z",updatedAt:"2022-08-12T12:24:21.930Z",environment:{sys:{id:e,type:a,linkType:f}},revision:2,contentType:{sys:{type:a,linkType:h,id:k}},locale:g},fields:{title:"Principal Associate (Web Developer)",workPlace:{sys:{type:a,linkType:b,id:m}},startDate:"2018-08-01",endDate:"2022-05-20",workPlaceName:"The Pew Charitable Trusts",url:"https:\u002F\u002Fwww.pewtrusts.org"}},{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:c,id:d}},id:"6xrmlRLBZ2518GEx0Wu3Aq",type:b,createdAt:B,updatedAt:B,environment:{sys:{id:e,type:a,linkType:f}},revision:i,contentType:{sys:{type:a,linkType:h,id:k}},locale:g},fields:{title:"Communications Specialist (part-time)",workPlace:{sys:{type:a,linkType:b,id:"2cuGeH3s2kAjIlVcvCwldo"}},startDate:"2017-12-01",endDate:"2018-08-17",workPlaceName:"Resources for the Future",url:"https:\u002F\u002Fwww.rff.org"}},{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:c,id:d}},id:"1dc27YRSkI9JDeXZFRdp6q",type:b,createdAt:C,updatedAt:C,environment:{sys:{id:e,type:a,linkType:f}},revision:i,contentType:{sys:{type:a,linkType:h,id:k}},locale:g},fields:{title:"Director of Digital Communications (and previous titles)",workPlace:{sys:{type:a,linkType:b,id:"3uOA1G8GrWndoQSTvgh7WN"}},startDate:"2008-04-01",endDate:"2016-04-15",workPlaceName:"Center for Global Development",url:"https:\u002F\u002Fwww.cgdev.org"}}]}},uses:{dependencies:l,params:l,parent:l,url:l}}]}}("Link","Entry","Space","3qr5d6sj491p","master","Environment","en-US","ContentType",1,"Asset","workPosition",void 0,"3XICrBnljaJmlfz9SMgtb0","3AIjGHsEBIU2L5LSAhDYZG","image\u002Fpng","data",null,"blogPost","6rhv4yMoAF3cN8jyYqZSWu","2023-01-13T01:48:42.934Z","project","2023-04-26T18:16:04.171Z","2022-08-16T17:11:11.708Z","2022-08-16T17:10:23.298Z","","2022-08-14T21:09:00.907Z","2022-08-11T20:17:58.945Z","2022-08-11T20:32:23.102Z","2022-08-11T20:34:18.096Z"))