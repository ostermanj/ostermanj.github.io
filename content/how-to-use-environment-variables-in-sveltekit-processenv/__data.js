window.__sveltekit_data = (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s){return {type:k,nodes:[l,l,{type:k,data:{authors:[{metadata:{tags:[],concepts:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"6rhv4yMoAF3cN8jyYqZSWu",type:h,createdAt:"2022-06-17T16:18:02.488Z",updatedAt:"2022-06-25T01:07:29.101Z",environment:{sys:{id:d,type:a,linkType:e}},revision:2,contentType:{sys:{type:a,linkType:i,id:"author"}},locale:f},fields:{fullName:"John Osterman",website:"https:\u002F\u002Fosterman.io\u002F",twitterAccount:"https:\u002F\u002Ftwitter.com\u002FJohnAOsterman",linkedinAccount:"https:\u002F\u002Fwww.linkedin.com\u002Fin\u002Fjohn-osterman-32714012\u002F",photo:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"6E2Gh0TS2hrqafgOY1NlHr",type:m,createdAt:n,updatedAt:n,environment:{sys:{id:d,type:a,linkType:e}},revision:g,locale:f},fields:{title:"john osterman photo",description:o,file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F6E2Gh0TS2hrqafgOY1NlHr\u002F68804563485dfdb3f0cb50fb38e3e3fa\u002Fosterman-photo.jpg",details:{size:256400,image:{width:750,height:847}},fileName:"osterman-photo.jpg",contentType:"image\u002Fjpeg"}}}}}],title:"How to use environment variables in SvelteKit (process.env)",subtitle:"It's easier than it used to be.",datePublished:"2022-08-30",body:"\u003Cp\u003E\u003Cspan class=\"first-letter\"\u003ES\u003C\u002Fspan\u003EvelteKit has recently changed how it brings environment variables into your code, whether from a \u003Ccode\u003E.env\u003C\u002Fcode\u003E file or from Node’s \u003Ccode\u003Eprocess.env\u003C\u002Fcode\u003E. The new method is better. It allows you to bring private variables (secrets such as API keys) into server-side code without workarounds. Public variables can be imported into client-side code.\u003C\u002Fp\u003E\n\u003Caside class=\"notice\"\u003EAll things SvelteKit are moving very fast and breaking changes are introduced frequently as it moves toward a stable version 1.0 release. Be sure to check out the date this post was published—it may get old fast.\u003C\u002Faside\u003E\n\u003Ch2\u003EHow\u003C\u002Fh2\u003E\n\u003Cp\u003EFour SvelteKit modules are at play to make this happen:\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fkit.svelte.dev\u002Fdocs\u002Fmodules#$env-dynamic-public\"\u003E\u003Ccode\u003E$env\u002Fdynamic\u002Fpublic\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fkit.svelte.dev\u002Fdocs\u002Fmodules#$env-dynamic-private\"\u003E\u003Ccode\u003E$env\u002Fdynamic\u002Fprivate\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fkit.svelte.dev\u002Fdocs\u002Fmodules#$env-static-public\"\u003E\u003Ccode\u003E$env\u002Fstatic\u002Fpublic\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fkit.svelte.dev\u002Fdocs\u002Fmodules#$env-static-private\"\u003E\u003Ccode\u003E$env\u002Fstatic\u002Fprivate\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003EThe \u003Ccode\u003Edynamic\u003C\u002Fcode\u003E modules are for variables accessed at runtime—variables not necessarily known at build time. The \u003Ccode\u003Estatic\u003C\u002Fcode\u003E modules for variables that can be injected as strings at build time. The \u003Ccode\u003Epublic\u003C\u002Fcode\u003E modules expose variables that are prefixed by “PUBLIC_” or another prefix set in your config file. The \u003Ccode\u003Eprivate\u003C\u002Fcode\u003E modules expose variables not prefixed; trying to import them into client-side code will throw an error. That’s to keep you from accidentally exposing secrets to the front end. See the docs for more information.\u003C\u002Fp\u003E\n\u003Cp\u003EIn your DEV environment you can supply your public and private variables in a \u003Ccode\u003E.env\u003C\u002Fcode\u003E file. That file shouldn’t be committed to source control, especially if it has private variables. In a STAGE or PROD environment you’ll want to supply your environment variables through \u003Ccode\u003Eprocess.env\u003C\u002Fcode\u003E by setting variables or secrets directly with your deployment service such as Vercel, Netlify, AWS Amplify, Azure Static Web Apps, or whatever yours is. This site, for instance, is hosted by GitHub Pages; its secrets are saved as repository secrets through the GitHub UI.\u003C\u002Fp\u003E\n\u003Cp\u003EThe docs show how to import the variables. For dynamic variables, you import \u003Ccode\u003Eenv\u003C\u002Fcode\u003E as a named export of the \u003Ccode\u003E$env\u002Fdynamic\u002F*\u003C\u002Fcode\u003E module: \u003Ccode\u003Eimport { dev } from '$env\u002Fdynamic\u002Fpublic';\u003C\u002Fcode\u003E, for instance. Your variables are properties of the \u003Ccode\u003Eenv\u003C\u002Fcode\u003E object.\u003C\u002Fp\u003E\n\u003Cp\u003EStatic variables are imported directly as named exports from the \u003Ccode\u003E$env\u002Fstatic\u002F*\u003C\u002Fcode\u003E module. This site, for instance, fetches content from \u003Ca href=\"https:\u002F\u002Fwww.contentful.com\u002F\"\u003EContentful\u003C\u002Fa\u003E during its build process. That requires API keys and other secrets and looks like this:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgist.github.com\u002Fostermanj\u002Faaeb966d4de44eb2a0d9e96c27987ce5\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\"\u003EEmbedded content: https:\u002F\u002Fgist.github.com\u002Fostermanj\u002Faaeb966d4de44eb2a0d9e96c27987ce5\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003EThe (relatively) old way\u003C\u002Fh2\u003E\n\u003Cp\u003EThe method outlined above came into being in July 2022, according to \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fsveltejs\u002Fkit\u002Fblob\u002Fmaster\u002Fpackages\u002Fkit\u002FCHANGELOG.md#100-next395\"\u003ESvelteKit’s changelog\u003C\u002Fa\u003E. Before that, as best I understand, in  local development SvelteKit was exposing variables loaded by Vite from \u003Ccode\u003E.env\u003C\u002Fcode\u003E, but only variables prefixed with “VITE_”. There was no straightforward way to import secrets into server-side code. One solution was to install \u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fenv-cmd\"\u003Eenv-cmd\u003C\u002Fa\u003E and add \u003Ccode\u003Eenv-cmd\u003C\u002Fcode\u003E to the dev script in \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E. That would expose the variables in \u003Ccode\u003E.env\u003C\u002Fcode\u003E to your source code but would make a detour around SvelteKit’s failsafe to prevent exposing secrets to the client.\u003C\u002Fp\u003E\n",snippet:"SvelteKit has a new way to bring environment variables into your code.",tags:[{metadata:{tags:[],concepts:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"3Zs1xPdBxUe7FNXmkXO59N",type:h,createdAt:p,updatedAt:p,environment:{sys:{id:d,type:a,linkType:e}},revision:g,contentType:{sys:{type:a,linkType:i,id:q}},locale:f},fields:{tag:"frameworks"}},{metadata:{tags:[],concepts:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"5UDGtnFPGejPUdY4ZV8tSH",type:h,createdAt:r,updatedAt:r,environment:{sys:{id:d,type:a,linkType:e}},revision:g,contentType:{sys:{type:a,linkType:i,id:q}},locale:f},fields:{tag:"sveltekit"}}],heroImage:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"qU1uNTaV2rrFJaT8Mha03",type:m,createdAt:s,updatedAt:s,environment:{sys:{id:d,type:a,linkType:e}},revision:g,locale:f},fields:{title:"SvelteKit logo and text",description:o,file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002FqU1uNTaV2rrFJaT8Mha03\u002F28f103dc12c4c15ec79f0e076a992997\u002Fp3nn57r52krvpdieblta.png",details:{size:35878,image:{width:1920,height:1080}},fileName:"p3nn57r52krvpdieblta.png",contentType:"image\u002Fpng"}}},slug:"how-to-use-environment-variables-in-sveltekit-process-env",contentType:"blogPost"},uses:{dependencies:j,params:["slug"],parent:j,url:j}}]}}("Link","Space","3qr5d6sj491p","master","Environment","en-US",1,"Entry","ContentType",void 0,"data",null,"Asset","2022-06-25T01:06:08.949Z","","2022-08-31T00:21:59.214Z","tag","2022-08-31T00:22:13.028Z","2022-08-31T00:26:23.277Z"))