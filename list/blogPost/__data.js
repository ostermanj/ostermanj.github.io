window.__sveltekit_data = (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q){l.metadata={tags:[]};l.sys={space:{sys:{type:a,linkType:b,id:c}},id:"6rhv4yMoAF3cN8jyYqZSWu",type:g,createdAt:"2022-06-17T16:18:02.488Z",updatedAt:"2022-06-25T01:07:29.101Z",environment:{sys:{id:d,type:a,linkType:e}},revision:p,contentType:{sys:{type:a,linkType:h,id:"author"}},locale:f};l.fields={fullName:"John Osterman",website:"https:\u002F\u002Fosterman.io\u002F",twitterAccount:"https:\u002F\u002Ftwitter.com\u002FJohnAOsterman",linkedinAccount:"https:\u002F\u002Fwww.linkedin.com\u002Fin\u002Fjohn-osterman-32714012\u002F",photo:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"6E2Gh0TS2hrqafgOY1NlHr",type:k,createdAt:w,updatedAt:w,environment:{sys:{id:d,type:a,linkType:e}},revision:i,locale:f},fields:{title:"john osterman photo",description:m,file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F6E2Gh0TS2hrqafgOY1NlHr\u002F68804563485dfdb3f0cb50fb38e3e3fa\u002Fosterman-photo.jpg",details:{size:256400,image:{width:750,height:847}},fileName:"osterman-photo.jpg",contentType:q}}}};r.metadata={tags:[]};r.sys={space:{sys:{type:a,linkType:b,id:c}},id:"3AIjGHsEBIU2L5LSAhDYZG",type:g,createdAt:D,updatedAt:D,environment:{sys:{id:d,type:a,linkType:e}},revision:i,contentType:{sys:{type:a,linkType:h,id:n}},locale:f};r.fields={tag:"dataviz"};z.metadata={tags:[]};z.sys={space:{sys:{type:a,linkType:b,id:c}},id:"3Z8ov12craUSFU6doWqj5b",type:g,createdAt:A,updatedAt:A,environment:{sys:{id:d,type:a,linkType:e}},revision:i,contentType:{sys:{type:a,linkType:h,id:n}},locale:f};z.fields={tag:"things I look up all the time"};E.metadata={tags:[]};E.sys={space:{sys:{type:a,linkType:b,id:c}},id:"5tPE4sus2igTIK2zIdqyBz",type:g,createdAt:F,updatedAt:F,environment:{sys:{id:d,type:a,linkType:e}},revision:i,contentType:{sys:{type:a,linkType:h,id:n}},locale:f};E.fields={tag:"mapbox"};K.metadata={tags:[]};K.sys={space:{sys:{type:a,linkType:b,id:c}},id:"1249mmZmPwsLjWHbXJhgux",type:g,createdAt:L,updatedAt:L,environment:{sys:{id:d,type:a,linkType:e}},revision:i,contentType:{sys:{type:a,linkType:h,id:n}},locale:f};K.fields={tag:"content"};return {type:v,nodes:[null,{type:v,data:{type:j,items:[{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"338kvwSFhcOgbbNjgYpTLi",type:g,createdAt:"2022-06-25T01:18:23.781Z",updatedAt:"2022-08-12T18:19:30.630Z",environment:{sys:{id:d,type:a,linkType:e}},revision:p,contentType:{sys:{type:a,linkType:h,id:j}},locale:f},fields:{authors:[l],title:"Easing the pain with continuous deployment",datePublished:"2021-09-24",body:"Getting better at coding, for me, comes in fits and starts. That's true for my command of a language but especially so for my devops set-up. Once I settle on and fine tune a configuration, I tend to stick with for a while. It takes a lot of work to get it right, so the payoff for changing it has to be high.\n\nFor instance: I've been using [Webpack v4][1] to bundle my code for three and a half years. In the meantime version 5 has come out as have other \"next generation\" bundlers like [Parcel][2], [Snowpack][3], and [Vite][4]. They promise some combination of faster builds, smaller bundles, and easier configuration. All good things! But while the payoff\u002Fpain tipping may come soon,  I'm not yet there. Maybe there'll be a personal project to test the waters.\n\nOne thing, however, that has really eased the pain and opened vistas recently is setting up continuous deployment. That may mean different things to different people, but in my work it means connecting one or more workflow environments directly to repository branches and setting up automatic builds so that those deployed environments always match the current codebase.\n\nAt Pew, for instance, I set the deployed GitHub pages version of a project to always match the `preview` branch of a repo. I can share that link with coworkers and always be sure what they see there is up to date simply by pushing `preview` to GitHub. This is made possible by GitHub actions and adding a `node.js.yml` file to the `.github\u002Fworkflows\u002F` directory of the repo.\n\nDeploying my front-end Pew work to production isn't so simple unfortunately and is not automated. The features I make have to be embedded in a page of the website and that is handled manually in the site's CMS.\n\nFor other work, though, I do have more automated workflows with AWS in one case and Microsoft Azure in another. MS Azure is home to the serverless back end for an upcoming Pew project's database and NodeJS functions. I have continuous deployment set up there so that Azure automatically builds and deploys any push to the `stage` branch of the repo. Deploying directly to production is warned against so I instead follow Azure's recommendation of \"swapping\" slots of the serverless functions. Push to `stage`, allow the automatic build to happen, and then swap the production slot for the stage slot. This ensures that the update is made smoothly and that the instance is still hot, should people be visiting the site at the time the swap is made.\n\nAWS is home to a side project on the energy efficiency of properties throughout the service areas of certain power companies. There's a lot going on there: S3 buckets for static files, Cognito for user authentication, Pinpoint for sending SMS message, some Lambdas, and more. The app itself is hosted in AWS Amplify, which has pretty easy (at least by AWS standards!) configuration for continuous deployment. The site has two live environments: dev and production. Any push to the `dev` branch triggers a build to the dev environment; pushing to `main` triggers production.\n\nOther, larger teams (larger than this team of one), can get more sophisticated with their continuous deployment and the other aspects of CI\u002FCD (continuous development, continuous integration). They can automate tests and merges and remove even more of the repetitive and painstaking tasks of deploying code to the web. But even small steps in that direction can make a big differenceâ€”and a happier developer.\n\n[1]: https:\u002F\u002Fv4.webpack.js.org\u002F\n[2]: https:\u002F\u002Fparceljs.org\u002F\n[3]: https:\u002F\u002Fwww.snowpack.dev\u002F\n[4]: https:\u002F\u002Fvitejs.dev\u002F\n",snippet:"Setting up continuous deployment can really ease the pain of web development. ",tags:[{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"2XOafKDP6dUEgVL2ao5Q5Z",type:g,createdAt:x,updatedAt:x,environment:{sys:{id:d,type:a,linkType:e}},revision:i,contentType:{sys:{type:a,linkType:h,id:n}},locale:f},fields:{tag:"devops"}}],heroImage:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"2QrCTloGZjWVsyOwrVwgDZ",type:k,createdAt:y,updatedAt:y,environment:{sys:{id:d,type:a,linkType:e}},revision:i,locale:f},fields:{title:"eric-muhr-u49bj3nOPD8-unsplash",file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F2QrCTloGZjWVsyOwrVwgDZ\u002F961743c8415161647c883d09c5d9dcb0\u002Feric-muhr-u49bj3nOPD8-unsplash.jpg",details:{size:704448,image:{width:2400,height:1600}},fileName:"eric-muhr-u49bj3nOPD8-unsplash.jpg",contentType:q}}}}},{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"1oyadfQd8N6WkaeS0WnBtr",type:g,createdAt:"2022-08-15T17:07:44.262Z",updatedAt:"2022-08-15T17:09:47.058Z",environment:{sys:{id:d,type:a,linkType:e}},revision:p,contentType:{sys:{type:a,linkType:h,id:j}},locale:f},fields:{authors:[l],title:"How do you spell propagation?",datePublished:"2021-08-12",body:"\n\u003Cspan style=\"float:none;\" class=\"first-letter\"\u003EP-R-O-P-A-G-A-T-I-O-N\u003C\u002Fspan\u003E\n\nAs in `Event.stopPropagation()`.\n\n\u003Cdel\u003Epropogation\u003C\u002Fdel\u003E \n[MDN](https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FEvent\u002FstopPropagation)\n",snippet:"One of the things I look up all the time: how to spell \"propagation.\"",tags:[z],heroImage:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"2O4PgpZEqVVdyOX60nMVmn",type:k,createdAt:B,updatedAt:B,environment:{sys:{id:d,type:a,linkType:e}},revision:i,locale:f},fields:{title:"the letters of propagation",description:m,file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F2O4PgpZEqVVdyOX60nMVmn\u002Fe9952e60e07a58d5a1e2a6350485b969\u002Fpropagation.png",details:{size:55552,image:{width:1711,height:1208}},fileName:"propagation.png",contentType:o}}}}},{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"7fYziFOPSJual3G94badmz",type:g,createdAt:"2022-08-14T21:00:02.690Z",updatedAt:"2022-08-26T17:07:35.578Z",environment:{sys:{id:d,type:a,linkType:e}},revision:C,contentType:{sys:{type:a,linkType:h,id:j}},locale:f},fields:{authors:[l],title:"How I make using Mapbox easier, part two: accessing data with dummy features",datePublished:"2021-01-03",body:"As I've [said before](\u002Fcontent\u002Fhow-i-make-using-mapbox-easier-part-one-async-adding-sources-and-layers\u002F), I really like using Mapbox for visualizing geographic data, but it does have a few things I stumble over again and again. One of those things is trying to access the entirety of a dataset that's behind map features that have not fully rendered. I'll explain what I mean about that in a moment; one of the solutions I've found, to cut to the chase, is to preprocess the data I need and attach it to a dummy feature that I know will render when the map loads.\n\n![mapbox dummy area](\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F7BVY3VwnWJTM90HvIZbgqG\u002Fcbf88c45ce1baae670b4133954c2212c\u002Fmapbox-dummy-feature.png)\n\n## Some explanation\nThere are basically two ways to supply the data you are visualizing to Mapbox: 1) you can do it when your code is executed by supplying the Map instance's `addSource()` method with geoJSON data, whether literally (i.e., passing the geoJSON object directly), by reference, or by supplying a url to it or 2) you can supply the data beforehand, behind the scenes, by uploading data to Mapbox Studio or using its tiling service. When you supply the data beforehand, Mapbox converts it into a tileset, a collection of data ready to be loaded into a map at a range of zoom levels. When you `addSource()` to the map, you point instead to the ready-made tileset. (You can also upload the data to Mapbox Studio as a dataset, which you can later convert to tilesets.)\n\nI prefer to upload or tile-service the data beforehand rather than handle potentially very large geoJSON objects client-side and expend the resources and milliseconds (or seconds) needed to convert that data into tiles on every page load, every time someone visits the page. If the data is static, why task each client with performing those operations over and over again?\n\n## The problem\nIf you're only rendering features on a map and only displaying or inspecting or otherwise making use of the data properties of those features after they are renderedâ€”for example, by clicking or hovering over locationsâ€”the above method of not handling the data client-side will be fine. But if you would like to also display data beyond the context of the map, such as summary stats or graphs in a sidebar, you will likely find that you don't have access to all the data points in the tileset because not all of the features have been rendered. Features may be outside the current bounds of the map, or they may be too densely packed to show at your current zoom level. So if you wanted to, for example, display a bar chart showing the number of the various kinds of, say, donut shops in your city, you would not reliably be able to get the full dataset using the [`queryRenderedFeatures()`](https:\u002F\u002Fdocs.mapbox.com\u002Fmapbox-gl-js\u002Fapi\u002Fmap\u002F#map#queryrenderedfeatures) method. \n\n## One harder solution\nThere is a viable way to use the [`querySourceFeatures()`](https:\u002F\u002Fdocs.mapbox.com\u002Fmapbox-gl-js\u002Fapi\u002Fmap\u002F#map#queryrenderedfeatures) method, which returns source data regardless of whether it has been rendered, but you have to manage two difficulties: data behind tiles outside the bounds of your current map viewport will not be returned and the same data may be returned more than once if the feature it's attached to spans multiple tiles.\n\nI've managed that solution for a project [mapping flood insurance programs](\u002Fcontent\u002Fmapping-data-from-the-national-flood-insurance-program\u002F) where the sidebar graphs were meant to update to always include only data for features within the current maps bounds. If your graphs don't need to adjust according to the map bounds, there are easier ways.\n\n## Easier solutions\nOne solution is to provide the full dataset to Mapbox for rendering features on the map and keep the same dataset client-side for other purposes. That doesn't sit wellâ€”you've got two sources of truth and are using up system resources unnecessarily. Another option is to keep only a preprocessed summary of the data client-side. That's fine; I've done it this way and probably will again. The heavy work of manipulating the data is done once during a build or prebuild step, so at least you're sparing the client from doing the same, repetitive data manipulation over and over again. That still gives you two sources of truth, though, and a somewhat more complex thing to maintain or update.\n\nTo keep all the dataâ€”the summary and its sourceâ€”together, you can attach the summary data to a dummy feature in the tileset. A tileset of polygons scattered throughout a geographical area, for instance, could have a dummy polygon, the size of your map bounds, with the summary data attached to it as the feature's properties. Adjust its opacity to zero using a data-driven expression and there you have it. Whenever you have to update the data, you have it all in one source.\n\nIf your tileset is of points, you'll have to put the summary data in its own polygon tileset so that it can cover an area large enough to ensure that it is rendered on map load. That's not as clean but at least with everything coming as a tileset you won't be juggling multiple ways of serving up the data. Grab it with `queryRenderedFeatures()`, and you're good to go.\n\nThanks as always for reading. If I've missed something or got it wrong, please let me know.",snippet:"Accessing the entire dataset behind a Mapbox layer is hard; attach data to a dummy feature and use that instead.",tags:[r,E],heroImage:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"7BVY3VwnWJTM90HvIZbgqG",type:k,createdAt:G,updatedAt:G,environment:{sys:{id:d,type:a,linkType:e}},revision:i,locale:f},fields:{title:"mapbox dummy area",description:m,file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F7BVY3VwnWJTM90HvIZbgqG\u002Fcbf88c45ce1baae670b4133954c2212c\u002Fmapbox-dummy-feature.png",details:{size:225524,image:{width:s,height:t}},fileName:"mapbox-dummy-feature.png",contentType:o}}}}},{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"6V9Xr8BggyQQpVgahElTkA",type:g,createdAt:"2022-08-14T21:12:52.768Z",updatedAt:"2022-08-16T15:05:33.526Z",environment:{sys:{id:d,type:a,linkType:e}},revision:C,contentType:{sys:{type:a,linkType:h,id:j}},locale:f},fields:{authors:[l],title:"How I make using Mapbox easier, part one: async adding sources and layers",datePublished:"2020-12-29",body:"\nMapbox (specifically, for me, [Mapbox GL JS][1]) is a great platform for visualizing geographic data. I like that their documentation is thorough (though not always easy to digest). I like that they seem to have invested a lot of effort into making it a useful dataviz tool, in addition to all its other uses: navigation, geocoding, augmented vision. I like that they're headquartered here in DC. And I like that their pricing plans have a meaningful and useful free tier.\n\nAwesome.\n\nOver the three or four years I've been using it, though, I have come up against the same challenges. One is the difficulty of its expressions syntax for data-driven styling or interpolated values, which I have to look up every time. Another is accessing the full data behind map features that may not be fully rendered. Anotherâ€”the topic of this postâ€”is how to work with the async nature of adding sources and layers to a map.\n\n![a mapbox view of San Diego with red, orange, and purple extruded recangles representing buildings on a dark background][2]\n\nAdding sources and layers to a Mapbox map is pretty straightforward. The source is the data, and the layer is a visualization of the data. You can have multiple layers based on the same data. To [add a source][3], you use the `addSource()` method of the Map instance. It takes an `id` string and a config object as parameters. The underlying data can be geoJSON, or a vector source already uploaded to Mapbox, or others like raster images or video. To [add a layer][4], you use the `addLayer()` method, which takes a config object and, optionally, the name of another layer to insert the new layer before.\n\nThe trouble is your code may quite easily call the `addLayer()` method\nbefore `addSource()` really takes effect. Both methods are quietly asynchronous, handled by Mapbox outside the written sequence of your code. Mapbox could, perhaps should, make those methods explicitly async or, in other words, make them Promises that resolve only after they have taken full effect. In fact, in this [Github issue][5], it looks like that may be in the works.\n\nIn the meantime, it simply takes time for `addSource()` and `addLayer()` to take effect, which means you have to ensure the map layers are ready before you try to do anything with them. My solution has been to wrap the native methods in my own Promises that test whether the layers are rendered before resolving. This way, I can add a source, add some layers, and then chain my next actions via `then()`.\n\nThat solution is available as a small npm package, [mapbox-helper][6]. Give it a try. More info about how it works and how to use it is available there. The short version is this: the native `addSource()` and `addLayer()` methods are combined into one, `addSourceAndLayers()`, in which you specify the source you want to add and one or more layers that are based on it. Internally, adding the layers only occurs after the source is ready. The method returns a Promise to your code that resolves only after all layers have been rendered or, if a layer's visibility property is set to 'none', is ready to be rendered.\n\nFor example:\n\n\u003Ca href=\"https:\u002F\u002Fgist.github.com\u002Fostermanj\u002Fc8302e49e9b83b83a05bd2e964d92fba\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\"\u003EEmbedded content: https:\u002F\u002Fgist.github.com\u002Fostermanj\u002Fc8302e49e9b83b83a05bd2e964d92fba\u003C\u002Fa\u003E\n\nThanks for reading. And, by the way, if you haven't checked out Mapbox's [version 2 release yet][7], you should. It has really great 3D rendering of elevation data and super hi-res satellite imagery, among other performance improvements.\n\n[1]: https:\u002F\u002Fdocs.mapbox.com\u002Fmapbox-gl-js\u002Fapi\u002F\n[2]: \u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F3KfGz5kmTI4dkz0l98oHY3\u002F777fd2648aaab56363a79c818dc3d1c2\u002Fmapbox.png\n[3]: https:\u002F\u002Fdocs.mapbox.com\u002Fmapbox-gl-js\u002Fapi\u002Fsources\u002F\n[4]: https:\u002F\u002Fdocs.mapbox.com\u002Fmapbox-gl-js\u002Fapi\u002Fmap\u002F#map#addlayer\n[5]: https:\u002F\u002Fgithub.com\u002Fmapbox\u002Fmapbox-gl-js\u002Fissues\u002F10192\n[6]: https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fmapbox-helper\n[7]: https:\u002F\u002Fwww.mapbox.com\u002Fblog\u002Fmapbox-gl-js-v2-3d-maps-camera-api-sky-api-launch",snippet:"Use a small npm package to work with the async nature of adding sources and layers to a Mapbox map.",tags:[E,r],heroImage:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"3KfGz5kmTI4dkz0l98oHY3",type:k,createdAt:H,updatedAt:H,environment:{sys:{id:d,type:a,linkType:e}},revision:i,locale:f},fields:{title:"mapbox async layers",description:m,file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F3KfGz5kmTI4dkz0l98oHY3\u002F777fd2648aaab56363a79c818dc3d1c2\u002Fmapbox.png",details:{size:774983,image:{width:s,height:t}},fileName:"mapbox.png",contentType:o}}}}},{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"14Dv4JCMRb1ktoKjtKho9Z",type:g,createdAt:"2022-08-15T16:56:08.179Z",updatedAt:"2022-08-15T17:06:40.205Z",environment:{sys:{id:d,type:a,linkType:e}},revision:I,contentType:{sys:{type:a,linkType:h,id:j}},locale:f},fields:{authors:[l],title:"Is viewBox camelCased?",datePublished:"2020-10-02",body:"\u003Cspan style=\"float:none;\" class=\"first-letter\"\u003EYES\u003C\u002Fspan\u003E\n\nAs in SVG viewBox attribute.\n\n\u003Cdel\u003Eviewbox\u003C\u002Fdel\u003E \n[MDN](https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FSVG\u002FAttribute\u002FviewBox)\n\n![a single-humped camel in the desert](\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F3I6Ln0CCEBofYIytHxNbun\u002F0a3c21ddd73b4cb1ab0ea5b7094a642d\u002Fcamel.jpg)",snippet:"One of the things I look up all the time: viewbox or viewBox?",tags:[z],heroImage:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"3I6Ln0CCEBofYIytHxNbun",type:k,createdAt:J,updatedAt:J,environment:{sys:{id:d,type:a,linkType:e}},revision:i,locale:f},fields:{title:"a single-humped camel in the desert",description:m,file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F3I6Ln0CCEBofYIytHxNbun\u002F0a3c21ddd73b4cb1ab0ea5b7094a642d\u002Fcamel.jpg",details:{size:52282,image:{width:s,height:t}},fileName:"camel.jpg",contentType:q}}}}},{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"6T6pjbF8hfxS96NPLUmT0a",type:g,createdAt:"2022-08-16T19:13:02.066Z",updatedAt:"2022-08-26T17:09:19.385Z",environment:{sys:{id:d,type:a,linkType:e}},revision:I,contentType:{sys:{type:a,linkType:h,id:j}},locale:f},fields:{authors:[l],title:"Four questions to ask about your data visualization",datePublished:"2016-11-30",body:"If charts and data visualizations are part of your content strategy, you know there's a ton of advice out there about how to do them well. At the very least, you should ask yourself four questions about \"the AIMS\" of each piece.\n\n1. Is it accurate?\n2. Is it intuitive?\n3. Is it memorable?\n4. Is it self-contained? \n\nNow some of the best data visualizations won't have positive answers to all of these questions, and that's fine (one hopes #1 and #3 are always yeses). But if your data viz is meant to convincingly convey a message, meeting these four criteria will help it do so quickly and effectively. \n\n## Is it accurate?\n\nStep one is to make data visualizations that faithfully represent the data. The value of that statement shouldn't need explanation, but it's very easy through intentional or unintentional design decisions to degrade a chart's accuracy. \n\nAn accurate chart should tell the truth, the whole truth, and nothing but the truth.\n\nDon't let embellishments or unnecessary effects take away from (or add to) your charts.\n\n**Rule-breaker #1, [from copyhackers.com](https:\u002F\u002Fcopyhackers.com\u002F2016\u002F02\u002Fshort-long-content\u002F):**\n\n![a bar chart with 3D effects and a truncated y-axis](\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F6m6vt8r1CtNFR6BWBbr9bJ\u002F2260c37ce51686f3ab2ba23abc1f5d42\u002Fcopyhackers-chart.png)\n\nThe 3D effect obscures what the precise values are. The truncated y-axis (min value = 90) exaggerates the difference between the two values. And there's little need to visualize two values anyway.\n\n**Better:** a bar chart with a zero-based axis and no 3D effects, or no chart at all. \n\n## Is it intuitive?\n\nIntuitive charts have visual elements that immediately match the main message by making use of established conventions or primary visual metaphors.\n\nThe example below from the World Bank has a lot going for it, but there's dissonance between the title's message of growth and the primary visual of flat lines. We expect to see something going up. By bucking some fundamental conventions and primary visual metaphors (e.g., that size is usually represented vertically and time horizontally), the chart requires additional effort to understand. \n\n**Rule-breaker #2, [from the World Bank](http:\u002F\u002Fblogs.worldbank.org\u002Fopendata\u002Fchart-25-years-growth-worlds-largest-cities):**\n\n![a nonintuitive chart](\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F1ZXhv1zTczozoybaz1a9Oo\u002Feb548653481c104c4eb7d2db8154cf35\u002Fworld-bank-chart.png)\n\nFlat lines not intuitive for notion of growth. We expect time to be along the horizontal axis. The colors selected for the years are also counterintuitive. The movement in time from dark dots to light dots also bucks expectations. Light to dark would be more intuitive.\n\n**Better:** A line chart or [slope graph](http:\u002F\u002Fwww.visualisingdata.com\u002F2013\u002F12\u002Fin-praise-of-slopegraphs\u002F) are good candidates. With the emphasis being the difference between two endpoints and not all the values in between, a slope graph would be best.\n\n## Is it memorable?\n\nTo be intuitive, we use conventions. To be accurate (and nothing but accurate), we strip out the superfluous. But it turns out that [visualizations with more \"chart junk\" (like illustrations and other nondata elements) are more memorable](http:\u002F\u002Fhci.usask.ca\u002Fpublications\u002Fview.php?id=173). \n\nIt makes sense that unusual elements would make a chart more memorable, but how can you embrace being memorable without compromising the other aspects of effective data visualization?\n\nI wouldn't reach too quickly for the clip art or brazen illustrations. Consider instead using small icons to help illustrate your data and, at the very least, make sure your charts are consistent with your brand's style so that people are more likely to remember where they saw it. The chart below would benefit from both.\n\n**Rule-breaker #3, [from the Peterson Institute for International Economics](https:\u002F\u002Fpiie.com\u002Fblogs\u002Fchina-economic-watch\u002Ftracking-chinas-service-sector):**\n\n![a nonmemorable chart](\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F1PHqAcYy43rhncqWkUbErb\u002F164fd84fb882cae73d80bbbdbca9939f\u002Fpeterson-chart.png)\n\nDefault fonts. Minimal branding. Not memorable.\n\n**Better:** Small icons for highway, railway, and air transport would help make this chart more memorable, and identify the lines more quickly than the legend. Brand colors are present, but brand-appropriate typeface and a logo would help it linger in the mind longer.\n\n## Is it self-contained?\n\nSelf-contained data visualizations convey their main messages quickly even when they're separated from their original contexts. This is good for two reasons: first, many of your readers are [only scanning what you write](\u002Fblog\u002F2016\u002F11\u002F09\u002Fwriting-web-embrace-skimming-scanning\u002F) and won't get much from charts and graphics that don't quickly convey messages on their own. That's a missed opportunity to get your point across.\n\nSecond, self-contained data visualizations are ready for posting on social media or as standalone content on your website. From one blog with three charts, for example, you get four pieces of content with no additional work.\n\nHow to make a chart self-contained depends on the information being conveyed, but the cardinal rule is this:\n\n**The chart's title should be a statement of the main message.**\n\nIf you can build the chart to the dimensions used by various social media (roughly 2:1 for Facebook, Twitter, and LinkedIn), even betterâ€”it'll look great on your website and in my Twitter feed.\n\n**Rule-breaker #4, from [Resources for the Future](http:\u002F\u002Fwww.rff.org\u002Fresearch\u002Fpublications\u002Ften-recommendations-plugging-gaps-inactive-well-policy):**\n\n![a non-self-contained chart](\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F4FGYBguYDbcMPVU92CWm5J\u002F05886997ca5bbb35d45cbabb554a0fad\u002Frff-chart.png)\n\nGood dimensions for social media, but not self contained.\n\nWithout the context we lose sight of what the chart is about (spent oil wells) and the main points: that while Alaska's and North Dakota's regulations are more stringent that the Bureau of Land Management's,  \"no state is regulating all five elements [of ensuring the safety of spent oil wells] the most stringent way.\" \n\n**Better:** A new titleâ€”**&ldquo;Two states outperform the Bureau of Land Management but regulation of spent oil wells is poor overall,\"** or something similar. With that, the chart would communication much more quickly and be able to stand on its own on social media and elsewhere.",snippet:"There's a ton of advice out there about how to do data viz well. At the very least, you should ask yourself four questions about \"the AIMS\" of each piece.\n",tags:[r,K],heroImage:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"3Kiq3srjOCqF7HCSiNvC3H",type:k,createdAt:M,updatedAt:M,environment:{sys:{id:d,type:a,linkType:e}},revision:i,locale:f},fields:{title:"line chart and bar chart icons with text: is it accurate? is it intuitive? is it memorable? is it self-contained?",description:m,file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F3Kiq3srjOCqF7HCSiNvC3H\u002F94f0dc6be6bc9dfb79cbb03fe671a5a9\u002Fcharts-image.png",details:{size:6582,image:{width:N,height:O}},fileName:"charts-image.png",contentType:o}}}}},{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"1yLbt9rKCj16qyMnEL167C",type:g,createdAt:"2022-08-15T16:47:08.553Z",updatedAt:"2022-08-16T15:07:13.960Z",environment:{sys:{id:d,type:a,linkType:e}},revision:p,contentType:{sys:{type:a,linkType:h,id:j}},locale:f},fields:{authors:[l],title:"Writing for the web: why you should encourage skimming and scanning",datePublished:"2016-11-09",body:"People donâ€™t read online so much as they skim and scan, and unless your content is crafted with that in mind, your readers are going to jump ship.\n\nThereâ€™s nothing new in this observation. Jakob Nielsenâ€™s research [demonstrated it back in 1997][link to Nielsen], and his findings hold up nearly 20 years later. Readers scan webpages, looking for keywords and main points. If you think about how you read on the web (and are honest with yourself), youâ€™ll probably find the same is true for you. So while you may wish your content was being read word by word, itâ€™s time to accept that it isnâ€™t.\n\nEven if you hate the skim, you should love the skimmer.\n\n## How to write for scanning\n\nLong paragraphs of unchanging text are difficult to scan and will turn many potential readers away. Here are a few editorial ways (not much different from Nielsenâ€™s 1997 advice) to make your content more scannable:\n\n- get to the point immediately with a journalistic style of writing\n- use short paragraphs, with one idea each\n- use subheadings\n- use bulleted lists (but not too much)\n- highlight words with bold type or links (but not too much)\n\nRemember: if everything is highlighted (or bulleted), nothing is. A brief that simply outlines an entire report, for instance, is neither easy to read nor easy to skim. Donâ€™t overdo it.\n\n![stylized image of two documents, one easy to read with bold text and bullets and the other hard to skim, just text](\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F7p3s5Q4QkAFnKnE8hj9b5N\u002Fbd34e988ac10d404b7aaa87a1768e747\u002Fweb-writing-scan.png)\n\n## Why write for scanning?\n\nYou may be thinking that your target audience are the people who *will* take the time to read your content carefully. Why should you care about the others? First, if your writing easy to scan, more of your audience will get something out of it. Even the fastest scanner might recommend your page to a friend or colleague, or tweet, sign a petition, or take another action.\n\nSecond, **scanning is a how we decide whether we want to read**. This is one of the main differences between reading online and reading in print. With print, we decide we want to read when we pick up a book or magazine. Online, we begin looking at a page before weâ€™ve decided whether to read it,  and we have to be convinced in that moment to read instead of navigating somewhere else on the web. The more scannable a page is, the easier that decision is to make, and the easier it is to read.\n\nIf you love your skimmers, your readers will love you back.\n\n[link to Nielsen]:https:\u002F\u002Fwww.nngroup.com\u002Farticles\u002Fhow-users-read-on-the-web\u002F",snippet:"Reading online usually involves a lot of skimming and scanning. Embrace it.",tags:[K,{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"3fDaOPEuuiHXi1QZFse17z",type:g,createdAt:P,updatedAt:P,environment:{sys:{id:d,type:a,linkType:e}},revision:i,contentType:{sys:{type:a,linkType:h,id:n}},locale:f},fields:{tag:"writing + editing"}}],heroImage:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:b,id:c}},id:"7p3s5Q4QkAFnKnE8hj9b5N",type:k,createdAt:Q,updatedAt:Q,environment:{sys:{id:d,type:a,linkType:e}},revision:i,locale:f},fields:{title:"web-writing-scan",file:{url:"\u002F\u002Fimages.ctfassets.net\u002F3qr5d6sj491p\u002F7p3s5Q4QkAFnKnE8hj9b5N\u002Fbd34e988ac10d404b7aaa87a1768e747\u002Fweb-writing-scan.png",details:{size:2864,image:{width:N,height:O}},fileName:"web-writing-scan.png",contentType:o}}}}}],limit:100,total:7},uses:{dependencies:u,params:["type"],parent:u,url:u}}]}}("Link","Space","3qr5d6sj491p","master","Environment","en-US","Entry","ContentType",1,"blogPost","Asset",{},"","tag","image\u002Fpng",2,"image\u002Fjpeg",{},1014,716,void 0,"data","2022-06-25T01:06:08.949Z","2022-06-25T01:16:22.342Z","2022-06-25T01:17:29.087Z",{},"2022-08-15T16:54:05.821Z","2022-08-15T17:00:14.394Z",10,"2022-07-25T18:21:18.957Z",{},"2022-08-14T20:57:53.919Z","2022-08-14T20:59:17.771Z","2022-08-14T21:09:00.907Z",3,"2022-08-15T16:55:20.046Z",{},"2022-08-15T16:42:21.776Z","2022-08-16T19:12:49.356Z",696,364,"2022-08-15T16:42:41.142Z","2022-08-15T16:44:59.600Z"))